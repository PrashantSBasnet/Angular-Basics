module.ts
app.module.ts
index.html <app-route> loads app.component.ts
app.component.ts -- html, css and all..


Components
app.component is on top of other components. add other components on it


components
	- used to build web pages (UI)
	- empty typescript class (eg AppComponent {} ) and we transfer it into something else by add a decorator @NgModule({})
	


module
	to bundle different pieces/functionality of app (eg.components of app) into packages
	empty typescript class (eg AppModule {} ) and we transfer it into something else by add a decorator @NgModule({})


why we import typescript classes (like server.component) without .ts extension?
-because the extension is added by webpack which bundles our project automatically
-angular when runs will know that server.component.ts is a part of the app


what do imports do?
- allow us to add other modules in a module
- angular itself is split into modules (BrowserModule, FormsModule, etc.)


selecting by class is also supported by angular
e.g 
	selector: '.app-servers'
	in html file  <div class= "app-servers">...</div>

constructor()
	method executable at the point of time the component is created by angular


Data Binding
String interpolation {{ data }}  
--to send data from typescript object to html template
--data can be in the form of number or other formats which can be converted easily into String


Property binding [property]= "data"
--to change any property in the html template


Event Binding (event) ="expression"
--by passing through function
--to listen keystrokes, clicks
<button (click)="passValue($event)">Pass</button>

passValue(e){
	console.log(e.target.value);
}


Two-way-binding [(ngModel)]="data"
--import FormsModule because ngModel is the part of FormsModule




Directives 
	instruction in the DOM
	e.g using selector to use components


Structural directive
--modify the DOM
--cannot use multiple structural directives in the same dom 
<p *ngIf....  >

*ngIf
	* is required 
	structural directive because it changes the structure of our DOM (it either adds the element or doesn't)
	<p *ngIf="isApproved">Created method that holds status</p>


*ngFor 
	<p *ngFor "let numer of numbers; let i =index"
		*ngIf "i%2==0"> //cannot use multiple structural directive in the same DOM

*ngSwitch


Attribute directives
--only modifies the property of the DOM

ngClass
<p [ngClass]={...}>

ngStyle
	appends style dynamically


Models
	typescript file
	typescript is not supported by browser. it is converted into javascript to be runnable

Feature of typescript:

	The constructor automatically creates name  and amount attributes because of the use of accessmodifier public. 
	if public is not used it acts as a typical constructor that requires attributes to be defined.
	export class Ingredient{
  		constructor(public name: string, public amount:number){}
	}
	

Component and Databinding
	Property and Event Binding
	Binding to Custom Properties
		(default) all properties of components are only accessible inside that component
		@Input() decorator solves this problem by exposing it to other components
		@Input() and @Output() give a child component a way to communicate with its parent component. 
		
		@Input() lets a parent component update data in the child component. 
		Conversely, @Output() lets the child send data to a parent component. We emit it as EventEmitter


		@Input()  element: { type: string; name: string; content: string; } | any; 
		assigning alias e.g @Input('sample')... now alias name ('sample') should be used in other components to pass data
		
		@Input - from parent to child component
		@Output() - from child to parent component/ to make a property listenable from outside i.e. parent component e.g. emit



Cross Component Communication
	Approach 1: using @Input and @Output (Binding to Custom Properties)
				- appropriate for parent to child components
			
			PARENT COMPONENT	      ------------------> 							CHILD COMPONENT
				[ngModel]				--------->					@Input -- value comes from another component
						
					<input type= "text" [(ngModel)="value"]>	---->				@Input() //so that value comes from outside component
																					value = 'new value;

				
																					Obtained value from parennt {{ value }}



		     CHILD COMPONENT 			---------------------->  					PARENT COMPONENT								
			
			 <input type="text" (input)="sendMessageToParent($event)">

			 ts

			@Output() //for cross component
			-- create Event emitter to emit the value to the parent component		

			-- sendMessageToParent(e){											 - bind the event to a function
					//emit value to parent
			}



	Approach 2: using Services


Event Capsulation 


View Capsulation
	shadow DOM supported by certain browsers
	@Component {(encapsulation: ViewEncapsulation.None)} makes the style global e.g. changing css style in one component overrides the style in all components.


Local Reference in Templates
	input type="text" class="form-control"
    	#severNameInput> <!-- use of local reference instead of two way binding -> [(ngModel)]="newServerName"> -->
	

Projecting Content Into Components with ng-content
	-projected component can be displayed using <ng-content></ng-content>
	-(default angular behaviour) every HTML between opening and closing <app-server-element>....</app-server-element> is lost 
	-put <ng-content></ng-content> where it is to be displayed	
	-can be used for navigation for simple apps


LifeCycle Hooks
-directives and components have
-components have more LifeCycle Hooks than directives
-lifecycle hooks in directives: ngOnInit, ngOnChanges, ngDoCheck, ngOnDestroy
-constructor() is a typescript feature (not a lifecycle hook)


LifeCycle of Component
	ngOnChanges		-Starts when new component is created. Also called after a bound input property changes (when property receives new values)
					-do not make any expensive operations (like API calls)
	ngOnInit		Called once the component is initialized. Component is not added to DOM yet so invisible. 
	ngDoCheck 		-Called during every change detection run (e.g when property changes) executed on every check. (e.g for every triggering events, timer)
					-do not make any expensive operations (like API calls)
					-never use ngDoCheck and ngOnChanges in same component because it can trigger infinite loops
	ngAfterContentInit 	-Called after content (ng-content) has been projected into view
	ngAfterContentChecked -Called every time the projected content has been checked
	ngAfterViewInit 	-Called after the component's view (and child views) has been initialized
	ngAfterViewChecked 	Called every time the view (and child's views) have been checked
	ngOnDestroy		-Called once the component is about to be distroyed
					-for cleaning activities, closing connection, prevents memory leaks, unsubscribing, 

	
Directives
	Attribute Directives    only affect/change the element they are added to (eg. changes bg color) [ngClass] [ngStyle]
	angular can render templates without DOM (while service use cases..)
	create custom attribute directives
	use of Decorator @HostListener, @HostBinding 

	*Structural Directives  affect a whole area in the DOM (elements get added/removed) eg. *ngIf *ngFor
	

Services
	-a normal typescript class. no need to add @Service or any decorator
	-service can be injected into another service @Injectibe()
	-class that acts as a central repository(business unit) where you can centralize your business logic (sharing data or functionality)
	-Usage: Code reuse, cross component communication
	
Dependency Injection
	-to inform certain service depends on another
	-angular creates instances of services when it comes across selectors
	-Hiearchial injector 
		AppModule 	(if we provide a service in AppModule, the same instance of the class of the service is available in whole app/component/directive
		AppCompoent 	(same instace of service is available for all Components (but not for other services)) app component and its children
	Any other compononent 	(same instance of service is available for the Components and all its child components) 
	Single component with no child components - instances can be ovveriden in the parent 

	@Injectibe() -- used in the service where sth is expected to be injected
	export class AccountsServce {}

.slice() 
	to only access part of the array(data) for security purpose

	
Cross Component communication Services
	

				A

B							C
								D	


B ---SERVICE ----> D 

B ----> SERVICE (Notify)
Service -------> D<Subject/EventEmitter>


Template Reference Variable
- Also known as local reference varialbe
- can be added to any element in DOM
- need to be passed to use it in typescript component
- using @Viewchild we can access the element in typescript

.html
<p #channel>Test</p>
<input type ="text" #myInput>
<button (click)="sendInput(myInput, channel)">Send</button>

component.ts
sendInput(input, channel){
	console.log(input.value);
	console.log(input.channel);  //gives whole <p>....
	cosole.log(input.channel.innerText); //gives text present in the <p> property
}


@ViewChild('myInput', {static:true}) myCustomInput;
- when we have to access DOM before any event is triggered
- 


Routing
		-navigation between pages
		-in SPA, navigation between multiple views
		- eg. 
			const routes: Routes =[ 
				{ path: '', redirectTo: 'home', pathMatch: 'full' }, //when there's no path
				{ path: 'home', component: HomeComponent},
				{ path: 'book', component: BookComponent},
				{ path : 'product/id: component: ProductComponent'},
				{ path: '**', component: PageNotFoundComponent} //the routes placed below wild card routes will not be functional
			]
		- <a routerLink= "/home">Home</a>

Routing Programmetically (try example from youtube)
	- used when certain action is required to be performed (like database update) before navigating to other routes

 
Child routes
Passing dynamic parameter to links (via Routing-- passing index in routes)
	

Observables -- are stream of data
            -- are constructs which is subscribed to be known about the change in data
            -- e.g. this.route.params.subscrie(....) -> params is an obervable because its value changes 

Types of Observables
e.g HTTP Request doesn't keep on emitting values 
subscribe -- observable emits values 

under the hood of Observables
	wrap some event source (eg ajax request, click listener, interval)
	.subscribe is used to deal with those data or error using custom functions


Operators

	
Subject 			 						Observable
active										passive
-can be triggered from code 							e.g. wraps callback, event
-next can be called
-only for cross component communication when @Output is not used 
(note: angular event emitter is used for events in the same components)
-subscribed manually
-must be destroyed								must be destroyed ngOnDestroy(){}

-type of observable
-implements both observer and observable interface				cannot be consumer
(this means both the consumer and provider)
-unicasting									multicasting


package.json defines what node modules to be installed while using npm install


XMLHttpRequest
- enables a web page to update just part of a page without disrupting what the user is doing
- heavily used in AJAX programming

AJAX
- asynchronous javascript and XML (JSON preferable nowadays)
- approach of using a number of existing technologies together (HTML, CSS, JavaScript, DOM, XML, XLST)
- web page is not required to reload entire page for updating the contents, thus boosting performance

callback
- function passed to another function

Event Handler
- type of callback
- asynchronous programming


Observable													 Promise
-streams the data in package (chunks)										-provides all data at once
-provides multiple values						
-doesn't wait for all the data to be available									-waits for all the data
-only provide data if there's someone to use it									-always provides 
-provided by JS library RxJS											-native to JS

-wrapper around the ordinary stream of data


RxJS
Observable  	<------------- 			Observer 				
(provider/stream of data)			(Subscriber)


myObervable = new Observable((observer) =>{
	console.log('Observable starts');
	observer.next("1"); //to emit data next method is called
	observer.next("2");
	observer.next("3");
	observer.next("4");
})

//Observable only emits data if there's a Subscriber
//subscribe takes 3 parameters which are optional
ngOnInit(){
	this.myObervable.subscribe((val)=>{ //next is a callback function. it is executed 4 times because 4 data emitted 
		console.log(val);
	});
}



Subject
Component1 					<-----Subject------->		 Component2	
-inject service	
-fetch value in constructor
	this.uname.subscribe(uname)=>{
		this.uname;		
	})

-updateMethod(uname){								same method in all other components...
	this.serviceName.userName.next(uname.value)
}




Service
mySubject = new Subject<any>();



Behavior Subject
-userName = new BehaviorSubject('john'); //sets value initially


Forms - in angular, it is group of contorls therefore FormGroup
1. Template-Driven -> Angular infers the Form Object from the DOM
		   -> Angular creates form representation on the basis of html file (it is unseen, happens under the hood)
		   -> 	<form (onSubmit)="functionName()" #f="ngForm">
				<input type ="text" ngModel name="fname">
				<input type ="text" ngModel name="lname">
			</form>
		     
			Values of the form are accessbible by.. f.fname, f.lname....

		   -> @ViewChild('vr')
			--for validation
			--when form is not submitted but value is requried
		   -> displaying messages for form validation 
	           -> using ngModelGroup and radioButton with two way binding
	           -> setting and patching Form values


		   -> setValue ovverides all the controls of the forms -- not the best approach  (ngGrouping is must)
		   -> patchValue is the best approach
	
			<div id="user-data" ngModelGroup="userData" #userData="ngModelGroup">
			<div class="form-group">			

			 suggestUserName(){
     				 const suggestedName= 'Superuser';
     				 this.signupForm.form.patchValue({
        				userData:{
          				username: suggestedName
        					},
     						 })
    							}


	

2. Reactive Approach    -> Form is created programmatically and synchronized with the DOM
			-> to create form programatically, matching the structure of the form (i.e html) with the model (typescript obj)
			-> form is not configured in the template, only synchronized with the directives
			-> ...new FormControl(para1, para2,..) can take one or more than one parameter
		
			   ngOnInit(): void {
    				this.signupForm= new FormGroup({
     			  'username': new FormControl(null),
     			  'lastname': new FormControl(null),
      			  'gender': new FormControl('male')
   					 }); 
  			   }

			-> <form [formGroup]="signUpForm" (ngSubmit)="onSubmit()"> //ngSubmit as a hook to sychronize the form
										     with the directives
			-> Custom Validator
				        -   forbiddenValues = [Dinesh, Ramesh]
		
			   ngOnInit()   -  'validator' = new FormControl(null, [Validators.required, fobidedenValidator.bind(this)])
					    (this.forbiddenValidator gives error because at this point the function is unknown to angular. So, binding is must!!)
		           
			   forbiddenValidator(control:FormControl):{[s:string]:boolean]}  //key value pair
			   {
				if (this.forbiddenValues.indexOf(control.value)!=-1){ //-1 is returned when the value is not the part of the array
					return {'valueisForbidden':true};
				}
				return null;  //Angular rule: nothing is passed when validation is correct. That's how angular works

			   }

			   <span *ngIf="signupForm.get('validator').errors['valueisForbidden']">Invalid entry</span>




